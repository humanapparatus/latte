
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Fri Jan 15 08:04:03 CET 2016
//----------------------------------------------------

package Latte;


/** CUP v0.10k generated parser.
  * @version Fri Jan 15 08:04:03 CET 2016
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\135\000\002\002\004\000\002\003\003\000\002\004" +
    "\003\000\002\004\005\000\002\004\007\000\002\005\003" +
    "\000\002\005\004\000\002\006\004\000\002\007\002\000" +
    "\002\007\003\000\002\007\005\000\002\010\010\000\002" +
    "\011\005\000\002\012\003\000\002\012\005\000\002\013" +
    "\002\000\002\013\004\000\002\014\005\000\002\015\002" +
    "\000\002\015\004\000\002\016\003\000\002\016\003\000" +
    "\002\016\005\000\002\016\006\000\002\016\005\000\002" +
    "\016\005\000\002\016\005\000\002\016\004\000\002\016" +
    "\007\000\002\016\011\000\002\016\007\000\002\016\012" +
    "\000\002\016\004\000\002\017\003\000\002\017\005\000" +
    "\002\020\003\000\002\020\005\000\002\021\004\000\002" +
    "\021\003\000\002\022\003\000\002\022\003\000\002\022" +
    "\003\000\002\022\003\000\002\022\003\000\002\023\005" +
    "\000\002\023\003\000\002\023\003\000\002\023\003\000" +
    "\002\023\003\000\002\023\007\000\002\023\004\000\002" +
    "\023\003\000\002\023\003\000\002\023\003\000\002\023" +
    "\003\000\002\023\003\000\002\023\005\000\002\024\004" +
    "\000\002\024\004\000\002\024\003\000\002\025\005\000" +
    "\002\025\003\000\002\026\005\000\002\026\003\000\002" +
    "\027\005\000\002\027\003\000\002\030\005\000\002\030" +
    "\003\000\002\031\005\000\002\031\003\000\002\032\002" +
    "\000\002\032\003\000\002\032\005\000\002\033\006\000" +
    "\002\034\006\000\002\035\005\000\002\036\005\000\002" +
    "\037\003\000\002\037\003\000\002\037\003\000\002\037" +
    "\003\000\002\037\003\000\002\040\003\000\002\040\003" +
    "\000\002\041\003\000\002\041\003\000\002\041\003\000" +
    "\002\042\003\000\002\042\003\000\002\042\003\000\002" +
    "\042\003\000\002\042\003\000\002\042\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\231\000\016\041\005\042\010\050\017\053\015\055" +
    "\016\061\013\001\002\000\004\061\233\001\002\000\012" +
    "\016\uffd8\017\uffd8\020\uffd8\061\uffd8\001\002\000\004\002" +
    "\232\001\002\000\004\002\000\001\002\000\004\061\022" +
    "\001\002\000\020\002\ufffc\041\005\042\010\050\017\053" +
    "\015\055\016\061\013\001\002\000\012\016\020\017\uffdb" +
    "\020\uffdb\061\uffdb\001\002\000\006\016\uffd6\061\uffd6\001" +
    "\002\000\020\002\uffff\041\uffff\042\uffff\050\uffff\053\uffff" +
    "\055\uffff\061\uffff\001\002\000\012\016\uffd9\017\uffd9\020" +
    "\uffd9\061\uffd9\001\002\000\012\016\uffd7\017\uffd7\020\uffd7" +
    "\061\uffd7\001\002\000\012\016\uffda\017\uffda\020\uffda\061" +
    "\uffda\001\002\000\010\017\uffdc\020\uffdc\061\uffdc\001\002" +
    "\000\004\002\ufffb\001\002\000\006\007\023\044\025\001" +
    "\002\000\016\010\ufff2\041\ufff2\050\ufff2\053\ufff2\055\ufff2" +
    "\061\ufff2\001\002\000\020\002\ufffe\041\ufffe\042\ufffe\050" +
    "\ufffe\053\ufffe\055\ufffe\061\ufffe\001\002\000\004\061\026" +
    "\001\002\000\004\007\023\001\002\000\020\002\ufffd\041" +
    "\ufffd\042\ufffd\050\ufffd\053\ufffd\055\ufffd\061\ufffd\001\002" +
    "\000\016\010\032\041\005\050\017\053\015\055\016\061" +
    "\013\001\002\000\004\061\035\001\002\000\020\002\ufff5" +
    "\041\ufff5\042\ufff5\050\ufff5\053\ufff5\055\ufff5\061\ufff5\001" +
    "\002\000\016\010\ufff4\041\ufff4\050\ufff4\053\ufff4\055\ufff4" +
    "\061\ufff4\001\002\000\016\010\ufff1\041\ufff1\050\ufff1\053" +
    "\ufff1\055\ufff1\061\ufff1\001\002\000\006\005\036\011\037" +
    "\001\002\000\016\006\ufff9\041\005\050\017\053\015\055" +
    "\016\061\013\001\002\000\016\010\ufff3\041\ufff3\050\ufff3" +
    "\053\ufff3\055\ufff3\061\ufff3\001\002\000\004\061\231\001" +
    "\002\000\004\006\045\001\002\000\006\004\043\006\ufff8" +
    "\001\002\000\016\006\ufff9\041\005\050\017\053\015\055" +
    "\016\061\013\001\002\000\004\006\ufff7\001\002\000\004" +
    "\007\046\001\002\000\052\005\uffef\007\uffef\010\uffef\011" +
    "\uffef\022\uffef\023\uffef\041\uffef\045\uffef\046\uffef\047\uffef" +
    "\050\uffef\051\uffef\052\uffef\053\uffef\054\uffef\055\uffef\056" +
    "\uffef\057\uffef\060\uffef\061\uffef\001\002\000\022\002\ufff6" +
    "\010\ufff6\041\ufff6\042\ufff6\050\ufff6\053\ufff6\055\ufff6\061" +
    "\ufff6\001\002\000\052\005\060\007\046\010\056\011\055" +
    "\022\052\023\051\041\005\045\071\046\070\047\067\050" +
    "\017\051\066\052\065\053\015\054\054\055\016\056\053" +
    "\057\064\060\063\061\061\001\002\000\020\005\060\045" +
    "\071\051\066\054\054\057\064\060\063\061\115\001\002" +
    "\000\020\005\060\045\071\051\066\054\054\057\064\060" +
    "\063\061\115\001\002\000\004\005\223\001\002\000\044" +
    "\004\uffcd\006\uffcd\011\uffcd\021\uffcd\022\uffcd\024\uffcd\025" +
    "\uffcd\027\uffcd\030\uffcd\031\uffcd\032\uffcd\033\uffcd\034\uffcd" +
    "\035\uffcd\036\uffcd\037\uffcd\040\uffcd\001\002\000\054\005" +
    "\uffed\007\uffed\010\uffed\011\uffed\022\uffed\023\uffed\041\uffed" +
    "\043\uffed\045\uffed\046\uffed\047\uffed\050\uffed\051\uffed\052" +
    "\uffed\053\uffed\054\uffed\055\uffed\056\uffed\057\uffed\060\uffed" +
    "\061\uffed\001\002\000\060\002\ufff0\005\ufff0\007\ufff0\010" +
    "\ufff0\011\ufff0\022\ufff0\023\ufff0\041\ufff0\042\ufff0\043\ufff0" +
    "\045\ufff0\046\ufff0\047\ufff0\050\ufff0\051\ufff0\052\ufff0\053" +
    "\ufff0\054\ufff0\055\ufff0\056\ufff0\057\ufff0\060\ufff0\061\ufff0" +
    "\001\002\000\056\004\uffd3\006\uffd3\011\uffd3\012\uffb3\013" +
    "\uffb3\014\uffb3\020\uffb3\021\uffd3\022\uffd3\024\uffd3\025\uffd3" +
    "\026\uffb3\027\uffd3\030\uffd3\031\uffd3\032\uffd3\033\uffd3\034" +
    "\uffd3\035\uffd3\036\uffd3\037\uffd3\040\uffd3\001\002\000\034" +
    "\005\060\022\052\023\051\041\005\045\071\050\017\051" +
    "\066\053\015\054\054\055\016\057\064\060\063\061\061" +
    "\001\002\000\062\005\117\006\uffd1\011\uffd1\012\uffb2\013" +
    "\uffb2\014\uffb2\016\uffd6\017\uffd6\020\uffb2\022\uffd1\024\uffd1" +
    "\025\uffd1\026\uffb2\027\uffd1\030\uffd1\031\uffd1\032\uffd1\033" +
    "\uffd1\034\uffd1\035\uffd1\036\uffd1\037\uffd1\040\uffd1\061\uffd6" +
    "\001\002\000\056\004\uffcb\006\uffcb\011\uffcb\012\uffb4\013" +
    "\uffb4\014\uffb4\020\uffb4\021\uffcb\022\uffcb\024\uffcb\025\uffcb" +
    "\026\uffb4\027\uffcb\030\uffcb\031\uffcb\032\uffcb\033\uffcb\034" +
    "\uffcb\035\uffcb\036\uffcb\037\uffcb\040\uffcb\001\002\000\044" +
    "\004\uffce\006\uffce\011\uffce\021\uffce\022\uffce\024\uffce\025" +
    "\uffce\027\uffce\030\uffce\031\uffce\032\uffce\033\uffce\034\uffce" +
    "\035\uffce\036\uffce\037\uffce\040\uffce\001\002\000\044\004" +
    "\uffca\006\uffca\011\uffca\021\uffca\022\uffca\024\uffca\025\uffca" +
    "\027\uffca\030\uffca\031\uffca\032\uffca\033\uffca\034\uffca\035" +
    "\uffca\036\uffca\037\uffca\040\uffca\001\002\000\026\005\060" +
    "\011\215\022\052\023\051\045\071\051\066\054\054\057" +
    "\064\060\063\061\115\001\002\000\014\041\005\050\017" +
    "\053\015\055\016\061\210\001\002\000\004\005\201\001" +
    "\002\000\004\005\172\001\002\000\044\004\uffcc\006\uffcc" +
    "\011\uffcc\021\uffcc\022\uffcc\024\uffcc\025\uffcc\027\uffcc\030" +
    "\uffcc\031\uffcc\032\uffcc\033\uffcc\034\uffcc\035\uffcc\036\uffcc" +
    "\037\uffcc\040\uffcc\001\002\000\056\004\uffd2\006\uffd2\011" +
    "\uffd2\012\uffb1\013\uffb1\014\uffb1\020\uffb1\021\uffd2\022\uffd2" +
    "\024\uffd2\025\uffd2\026\uffb1\027\uffd2\030\uffd2\031\uffd2\032" +
    "\uffd2\033\uffd2\034\uffd2\035\uffd2\036\uffd2\037\uffd2\040\uffd2" +
    "\001\002\000\044\004\uffc6\006\uffc6\011\uffc6\021\uffc6\022" +
    "\uffc6\024\uffc6\025\uffc6\027\uffc6\030\uffc6\031\uffc6\032\uffc6" +
    "\033\uffc6\034\uffc6\035\uffc6\036\uffc6\037\uffc6\040\uffc6\001" +
    "\002\000\044\004\uffc4\006\uffc4\011\uffc4\021\uffc4\022\uffc4" +
    "\024\uffc4\025\uffc4\027\uffc4\030\uffc4\031\uffc4\032\uffc4\033" +
    "\uffc4\034\uffc4\035\uffc4\036\uffc4\037\uffc4\040\uffc4\001\002" +
    "\000\044\004\uffc2\006\uffc2\011\uffc2\021\uffc2\022\uffc2\024" +
    "\uffc2\025\uffc2\027\uffc2\030\166\031\165\032\164\033\uffc2" +
    "\034\uffc2\035\uffc2\036\uffc2\037\uffc2\040\uffc2\001\002\000" +
    "\036\004\uffc0\006\uffc0\011\uffc0\021\uffc0\022\161\024\uffc0" +
    "\025\uffc0\027\160\033\uffc0\034\uffc0\035\uffc0\036\uffc0\037" +
    "\uffc0\040\uffc0\001\002\000\004\011\171\001\002\000\032" +
    "\004\uffbe\006\uffbe\011\uffbe\021\uffbe\024\150\025\uffbe\033" +
    "\155\034\154\035\153\036\152\037\151\040\147\001\002" +
    "\000\014\004\uffbc\006\uffbc\011\uffbc\021\uffbc\025\144\001" +
    "\002\000\014\012\137\013\136\014\135\020\126\026\125" +
    "\001\002\000\052\005\uffee\007\uffee\010\uffee\011\uffee\022" +
    "\uffee\023\uffee\041\uffee\045\uffee\046\uffee\047\uffee\050\uffee" +
    "\051\uffee\052\uffee\053\uffee\054\uffee\055\uffee\056\uffee\057" +
    "\uffee\060\uffee\061\uffee\001\002\000\004\061\110\001\002" +
    "\000\056\004\uffd4\006\uffd4\011\uffd4\012\uffb0\013\uffb0\014" +
    "\uffb0\020\uffb0\021\uffd4\022\uffd4\024\uffd4\025\uffd4\026\uffb0" +
    "\027\uffd4\030\uffd4\031\uffd4\032\uffd4\033\uffd4\034\uffd4\035" +
    "\uffd4\036\uffd4\037\uffd4\040\uffd4\001\002\000\054\005\uffec" +
    "\007\uffec\010\uffec\011\uffec\022\uffec\023\uffec\041\uffec\043" +
    "\uffec\045\uffec\046\uffec\047\uffec\050\uffec\051\uffec\052\uffec" +
    "\053\uffec\054\uffec\055\uffec\056\uffec\057\uffec\060\uffec\061" +
    "\uffec\001\002\000\006\004\133\011\uffde\001\002\000\010" +
    "\004\uffe0\011\uffe0\012\113\001\002\000\004\011\112\001" +
    "\002\000\054\005\uffeb\007\uffeb\010\uffeb\011\uffeb\022\uffeb" +
    "\023\uffeb\041\uffeb\043\uffeb\045\uffeb\046\uffeb\047\uffeb\050" +
    "\uffeb\051\uffeb\052\uffeb\053\uffeb\054\uffeb\055\uffeb\056\uffeb" +
    "\057\uffeb\060\uffeb\061\uffeb\001\002\000\024\005\060\022" +
    "\052\023\051\045\071\051\066\054\054\057\064\060\063" +
    "\061\115\001\002\000\006\020\126\026\125\001\002\000" +
    "\052\004\uffd1\005\117\006\uffd1\011\uffd1\020\uffb2\021\uffd1" +
    "\022\uffd1\024\uffd1\025\uffd1\026\uffb2\027\uffd1\030\uffd1\031" +
    "\uffd1\032\uffd1\033\uffd1\034\uffd1\035\uffd1\036\uffd1\037\uffd1" +
    "\040\uffd1\001\002\000\006\004\uffdf\011\uffdf\001\002\000" +
    "\026\005\060\006\uffbb\022\052\023\051\045\071\051\066" +
    "\054\054\057\064\060\063\061\115\001\002\000\006\004" +
    "\123\006\uffba\001\002\000\004\006\122\001\002\000\056" +
    "\004\uffb8\006\uffb8\011\uffb8\012\uffb8\013\uffb8\014\uffb8\020" +
    "\uffb8\021\uffb8\022\uffb8\024\uffb8\025\uffb8\026\uffb8\027\uffb8" +
    "\030\uffb8\031\uffb8\032\uffb8\033\uffb8\034\uffb8\035\uffb8\036" +
    "\uffb8\037\uffb8\040\uffb8\001\002\000\026\005\060\006\uffbb" +
    "\022\052\023\051\045\071\051\066\054\054\057\064\060" +
    "\063\061\115\001\002\000\004\006\uffb9\001\002\000\004" +
    "\061\131\001\002\000\024\005\060\022\052\023\051\045" +
    "\071\051\066\054\054\057\064\060\063\061\115\001\002" +
    "\000\004\021\130\001\002\000\056\004\uffb7\006\uffb7\011" +
    "\uffb7\012\uffb7\013\uffb7\014\uffb7\020\uffb7\021\uffb7\022\uffb7" +
    "\024\uffb7\025\uffb7\026\uffb7\027\uffb7\030\uffb7\031\uffb7\032" +
    "\uffb7\033\uffb7\034\uffb7\035\uffb7\036\uffb7\037\uffb7\040\uffb7" +
    "\001\002\000\060\004\uffb6\005\117\006\uffb6\011\uffb6\012" +
    "\uffb6\013\uffb6\014\uffb6\020\uffb6\021\uffb6\022\uffb6\024\uffb6" +
    "\025\uffb6\026\uffb6\027\uffb6\030\uffb6\031\uffb6\032\uffb6\033" +
    "\uffb6\034\uffb6\035\uffb6\036\uffb6\037\uffb6\040\uffb6\001\002" +
    "\000\056\004\uffb5\006\uffb5\011\uffb5\012\uffb5\013\uffb5\014" +
    "\uffb5\020\uffb5\021\uffb5\022\uffb5\024\uffb5\025\uffb5\026\uffb5" +
    "\027\uffb5\030\uffb5\031\uffb5\032\uffb5\033\uffb5\034\uffb5\035" +
    "\uffb5\036\uffb5\037\uffb5\040\uffb5\001\002\000\004\061\110" +
    "\001\002\000\004\011\uffdd\001\002\000\004\011\143\001" +
    "\002\000\004\011\142\001\002\000\024\005\060\022\052" +
    "\023\051\045\071\051\066\054\054\057\064\060\063\061" +
    "\115\001\002\000\004\011\141\001\002\000\054\005\uffea" +
    "\007\uffea\010\uffea\011\uffea\022\uffea\023\uffea\041\uffea\043" +
    "\uffea\045\uffea\046\uffea\047\uffea\050\uffea\051\uffea\052\uffea" +
    "\053\uffea\054\uffea\055\uffea\056\uffea\057\uffea\060\uffea\061" +
    "\uffea\001\002\000\054\005\uffe9\007\uffe9\010\uffe9\011\uffe9" +
    "\022\uffe9\023\uffe9\041\uffe9\043\uffe9\045\uffe9\046\uffe9\047" +
    "\uffe9\050\uffe9\051\uffe9\052\uffe9\053\uffe9\054\uffe9\055\uffe9" +
    "\056\uffe9\057\uffe9\060\uffe9\061\uffe9\001\002\000\054\005" +
    "\uffe8\007\uffe8\010\uffe8\011\uffe8\022\uffe8\023\uffe8\041\uffe8" +
    "\043\uffe8\045\uffe8\046\uffe8\047\uffe8\050\uffe8\051\uffe8\052" +
    "\uffe8\053\uffe8\054\uffe8\055\uffe8\056\uffe8\057\uffe8\060\uffe8" +
    "\061\uffe8\001\002\000\024\005\060\022\052\023\051\045" +
    "\071\051\066\054\054\057\064\060\063\061\115\001\002" +
    "\000\012\004\uffbd\006\uffbd\011\uffbd\021\uffbd\001\002\000" +
    "\024\005\060\022\052\023\051\045\071\051\066\054\054" +
    "\057\064\060\063\061\115\001\002\000\024\005\uffa5\022" +
    "\uffa5\023\uffa5\045\uffa5\051\uffa5\054\uffa5\057\uffa5\060\uffa5" +
    "\061\uffa5\001\002\000\024\005\060\022\052\023\051\045" +
    "\071\051\066\054\054\057\064\060\063\061\115\001\002" +
    "\000\024\005\uffa6\022\uffa6\023\uffa6\045\uffa6\051\uffa6\054" +
    "\uffa6\057\uffa6\060\uffa6\061\uffa6\001\002\000\024\005\uffa7" +
    "\022\uffa7\023\uffa7\045\uffa7\051\uffa7\054\uffa7\057\uffa7\060" +
    "\uffa7\061\uffa7\001\002\000\024\005\uffa8\022\uffa8\023\uffa8" +
    "\045\uffa8\051\uffa8\054\uffa8\057\uffa8\060\uffa8\061\uffa8\001" +
    "\002\000\024\005\uffa9\022\uffa9\023\uffa9\045\uffa9\051\uffa9" +
    "\054\uffa9\057\uffa9\060\uffa9\061\uffa9\001\002\000\024\005" +
    "\uffaa\022\uffaa\023\uffaa\045\uffaa\051\uffaa\054\uffaa\057\uffaa" +
    "\060\uffaa\061\uffaa\001\002\000\014\004\uffbf\006\uffbf\011" +
    "\uffbf\021\uffbf\025\uffbf\001\002\000\036\004\uffc1\006\uffc1" +
    "\011\uffc1\021\uffc1\022\161\024\uffc1\025\uffc1\027\160\033" +
    "\uffc1\034\uffc1\035\uffc1\036\uffc1\037\uffc1\040\uffc1\001\002" +
    "\000\024\005\uffaf\022\uffaf\023\uffaf\045\uffaf\051\uffaf\054" +
    "\uffaf\057\uffaf\060\uffaf\061\uffaf\001\002\000\024\005\uffae" +
    "\022\uffae\023\uffae\045\uffae\051\uffae\054\uffae\057\uffae\060" +
    "\uffae\061\uffae\001\002\000\024\005\060\022\052\023\051" +
    "\045\071\051\066\054\054\057\064\060\063\061\115\001" +
    "\002\000\044\004\uffc3\006\uffc3\011\uffc3\021\uffc3\022\uffc3" +
    "\024\uffc3\025\uffc3\027\uffc3\030\166\031\165\032\164\033" +
    "\uffc3\034\uffc3\035\uffc3\036\uffc3\037\uffc3\040\uffc3\001\002" +
    "\000\024\005\uffab\022\uffab\023\uffab\045\uffab\051\uffab\054" +
    "\uffab\057\uffab\060\uffab\061\uffab\001\002\000\024\005\uffac" +
    "\022\uffac\023\uffac\045\uffac\051\uffac\054\uffac\057\uffac\060" +
    "\uffac\061\uffac\001\002\000\024\005\uffad\022\uffad\023\uffad" +
    "\045\uffad\051\uffad\054\uffad\057\uffad\060\uffad\061\uffad\001" +
    "\002\000\024\005\060\022\052\023\051\045\071\051\066" +
    "\054\054\057\064\060\063\061\115\001\002\000\044\004" +
    "\uffc5\006\uffc5\011\uffc5\021\uffc5\022\uffc5\024\uffc5\025\uffc5" +
    "\027\uffc5\030\uffc5\031\uffc5\032\uffc5\033\uffc5\034\uffc5\035" +
    "\uffc5\036\uffc5\037\uffc5\040\uffc5\001\002\000\054\005\uffe1" +
    "\007\uffe1\010\uffe1\011\uffe1\022\uffe1\023\uffe1\041\uffe1\043" +
    "\uffe1\045\uffe1\046\uffe1\047\uffe1\050\uffe1\051\uffe1\052\uffe1" +
    "\053\uffe1\054\uffe1\055\uffe1\056\uffe1\057\uffe1\060\uffe1\061" +
    "\uffe1\001\002\000\014\041\005\050\017\053\015\055\016" +
    "\061\013\001\002\000\004\061\174\001\002\000\004\015" +
    "\175\001\002\000\004\061\176\001\002\000\004\006\177" +
    "\001\002\000\050\005\060\007\046\011\055\022\052\023" +
    "\051\041\005\045\071\046\070\047\067\050\017\051\066" +
    "\052\065\053\015\054\054\055\016\056\053\057\064\060" +
    "\063\061\061\001\002\000\054\005\uffe2\007\uffe2\010\uffe2" +
    "\011\uffe2\022\uffe2\023\uffe2\041\uffe2\043\uffe2\045\uffe2\046" +
    "\uffe2\047\uffe2\050\uffe2\051\uffe2\052\uffe2\053\uffe2\054\uffe2" +
    "\055\uffe2\056\uffe2\057\uffe2\060\uffe2\061\uffe2\001\002\000" +
    "\024\005\060\022\052\023\051\045\071\051\066\054\054" +
    "\057\064\060\063\061\115\001\002\000\004\006\203\001" +
    "\002\000\050\005\060\007\046\011\055\022\052\023\051" +
    "\041\005\045\071\046\070\047\067\050\017\051\066\052" +
    "\065\053\015\054\054\055\016\056\053\057\064\060\063" +
    "\061\061\001\002\000\054\005\uffe5\007\uffe5\010\uffe5\011" +
    "\uffe5\022\uffe5\023\uffe5\041\uffe5\043\205\045\uffe5\046\uffe5" +
    "\047\uffe5\050\uffe5\051\uffe5\052\uffe5\053\uffe5\054\uffe5\055" +
    "\uffe5\056\uffe5\057\uffe5\060\uffe5\061\uffe5\001\002\000\050" +
    "\005\060\007\046\011\055\022\052\023\051\041\005\045" +
    "\071\046\070\047\067\050\017\051\066\052\065\053\015" +
    "\054\054\055\016\056\053\057\064\060\063\061\061\001" +
    "\002\000\054\005\uffe4\007\uffe4\010\uffe4\011\uffe4\022\uffe4" +
    "\023\uffe4\041\uffe4\043\uffe4\045\uffe4\046\uffe4\047\uffe4\050" +
    "\uffe4\051\uffe4\052\uffe4\053\uffe4\054\uffe4\055\uffe4\056\uffe4" +
    "\057\uffe4\060\uffe4\061\uffe4\001\002\000\004\020\211\001" +
    "\002\000\050\004\uffcf\006\uffcf\011\uffcf\016\uffd6\020\uffd6" +
    "\021\uffcf\022\uffcf\024\uffcf\025\uffcf\027\uffcf\030\uffcf\031" +
    "\uffcf\032\uffcf\033\uffcf\034\uffcf\035\uffcf\036\uffcf\037\uffcf" +
    "\040\uffcf\001\002\000\024\005\060\022\052\023\051\045" +
    "\071\051\066\054\054\057\064\060\063\061\115\001\002" +
    "\000\004\021\213\001\002\000\044\004\uffd0\006\uffd0\011" +
    "\uffd0\021\uffd0\022\uffd0\024\uffd0\025\uffd0\027\uffd0\030\uffd0" +
    "\031\uffd0\032\uffd0\033\uffd0\034\uffd0\035\uffd0\036\uffd0\037" +
    "\uffd0\040\uffd0\001\002\000\004\011\216\001\002\000\054" +
    "\005\uffe6\007\uffe6\010\uffe6\011\uffe6\022\uffe6\023\uffe6\041" +
    "\uffe6\043\uffe6\045\uffe6\046\uffe6\047\uffe6\050\uffe6\051\uffe6" +
    "\052\uffe6\053\uffe6\054\uffe6\055\uffe6\056\uffe6\057\uffe6\060" +
    "\uffe6\061\uffe6\001\002\000\054\005\uffe7\007\uffe7\010\uffe7" +
    "\011\uffe7\022\uffe7\023\uffe7\041\uffe7\043\uffe7\045\uffe7\046" +
    "\uffe7\047\uffe7\050\uffe7\051\uffe7\052\uffe7\053\uffe7\054\uffe7" +
    "\055\uffe7\056\uffe7\057\uffe7\060\uffe7\061\uffe7\001\002\000" +
    "\004\006\222\001\002\000\004\017\221\001\002\000\044" +
    "\004\uffd5\006\uffd5\011\uffd5\021\uffd5\022\uffd5\024\uffd5\025" +
    "\uffd5\027\uffd5\030\uffd5\031\uffd5\032\uffd5\033\uffd5\034\uffd5" +
    "\035\uffd5\036\uffd5\037\uffd5\040\uffd5\001\002\000\044\004" +
    "\uffc9\006\uffc9\011\uffc9\021\uffc9\022\uffc9\024\uffc9\025\uffc9" +
    "\027\uffc9\030\uffc9\031\uffc9\032\uffc9\033\uffc9\034\uffc9\035" +
    "\uffc9\036\uffc9\037\uffc9\040\uffc9\001\002\000\024\005\060" +
    "\022\052\023\051\045\071\051\066\054\054\057\064\060" +
    "\063\061\115\001\002\000\004\006\225\001\002\000\050" +
    "\005\060\007\046\011\055\022\052\023\051\041\005\045" +
    "\071\046\070\047\067\050\017\051\066\052\065\053\015" +
    "\054\054\055\016\056\053\057\064\060\063\061\061\001" +
    "\002\000\054\005\uffe3\007\uffe3\010\uffe3\011\uffe3\022\uffe3" +
    "\023\uffe3\041\uffe3\043\uffe3\045\uffe3\046\uffe3\047\uffe3\050" +
    "\uffe3\051\uffe3\052\uffe3\053\uffe3\054\uffe3\055\uffe3\056\uffe3" +
    "\057\uffe3\060\uffe3\061\uffe3\001\002\000\044\004\uffc8\006" +
    "\uffc8\011\uffc8\021\uffc8\022\uffc8\024\uffc8\025\uffc8\027\uffc8" +
    "\030\uffc8\031\uffc8\032\uffc8\033\uffc8\034\uffc8\035\uffc8\036" +
    "\uffc8\037\uffc8\040\uffc8\001\002\000\044\004\uffc7\006\uffc7" +
    "\011\uffc7\021\uffc7\022\uffc7\024\uffc7\025\uffc7\027\uffc7\030" +
    "\uffc7\031\uffc7\032\uffc7\033\uffc7\034\uffc7\035\uffc7\036\uffc7" +
    "\037\uffc7\040\uffc7\001\002\000\006\004\ufffa\006\ufffa\001" +
    "\002\000\004\002\001\001\002\000\004\005\036\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\231\000\016\003\005\004\010\005\006\010\013\021" +
    "\003\022\011\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\004\010\005\020\010\013\021\003\022\011\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\011\023\001\001\000" +
    "\004\013\027\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\011\026\001\001\000\002\001\001\000\012\010" +
    "\032\012\033\021\030\022\011\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\006\041\007\040\021\037\022\011" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\006\041\007\043\021\037" +
    "\022\011\001\001\000\002\001\001\000\004\014\046\001" +
    "\001\000\004\015\047\001\001\000\002\001\001\000\042" +
    "\014\105\016\102\021\103\022\011\023\072\024\073\025" +
    "\074\026\075\027\077\030\100\031\076\033\061\034\071" +
    "\035\104\036\056\037\101\001\001\000\016\023\227\033" +
    "\061\034\071\035\104\036\056\037\113\001\001\000\016" +
    "\023\226\033\061\034\071\035\104\036\056\037\113\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\036\021\217\022" +
    "\011\023\072\024\073\025\074\026\075\027\077\030\100" +
    "\031\216\033\061\034\071\035\104\036\056\037\113\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\032\023\072\024\073\025\074\026" +
    "\075\027\077\030\100\031\213\033\061\034\071\035\104" +
    "\036\056\037\113\001\001\000\006\021\206\022\011\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\041\166\001\001\000\004\040\161\001\001\000\002" +
    "\001\001\000\004\042\145\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\017\106\020\110" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\032\023\072\024\073\025\074\026\075\027\077\030" +
    "\100\031\115\033\061\034\071\035\104\036\056\037\113" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\034\023\072\024\073\025\074\026\075\027\077" +
    "\030\100\031\117\032\120\033\061\034\071\035\104\036" +
    "\056\037\113\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\034\023\072\024\073\025\074\026" +
    "\075\027\077\030\100\031\117\032\123\033\061\034\071" +
    "\035\104\036\056\037\113\001\001\000\002\001\001\000" +
    "\004\033\131\001\001\000\032\023\072\024\073\025\074" +
    "\026\075\027\077\030\100\031\126\033\061\034\071\035" +
    "\104\036\056\037\113\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\017" +
    "\106\020\133\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\032\023\072\024\073\025\074\026" +
    "\075\027\077\030\100\031\137\033\061\034\071\035\104" +
    "\036\056\037\113\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\032\023\072" +
    "\024\073\025\074\026\075\027\077\030\100\031\144\033" +
    "\061\034\071\035\104\036\056\037\113\001\001\000\002" +
    "\001\001\000\024\023\072\024\073\025\074\026\156\033" +
    "\061\034\071\035\104\036\056\037\113\001\001\000\002" +
    "\001\001\000\030\023\072\024\073\025\074\026\075\027" +
    "\077\030\155\033\061\034\071\035\104\036\056\037\113" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\040\161\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\023\072\024\073\025\162\033\061\034\071" +
    "\035\104\036\056\037\113\001\001\000\004\041\166\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\023\072\024\167\033\061\034\071\035\104\036" +
    "\056\037\113\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\021\172\022\011\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\042" +
    "\014\105\016\177\021\103\022\011\023\072\024\073\025" +
    "\074\026\075\027\077\030\100\031\076\033\061\034\071" +
    "\035\104\036\056\037\101\001\001\000\002\001\001\000" +
    "\032\023\072\024\073\025\074\026\075\027\077\030\100" +
    "\031\201\033\061\034\071\035\104\036\056\037\113\001" +
    "\001\000\002\001\001\000\042\014\105\016\203\021\103" +
    "\022\011\023\072\024\073\025\074\026\075\027\077\030" +
    "\100\031\076\033\061\034\071\035\104\036\056\037\101" +
    "\001\001\000\002\001\001\000\042\014\105\016\205\021" +
    "\103\022\011\023\072\024\073\025\074\026\075\027\077" +
    "\030\100\031\076\033\061\034\071\035\104\036\056\037" +
    "\101\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\032\023\072\024\073\025\074\026\075\027" +
    "\077\030\100\031\211\033\061\034\071\035\104\036\056" +
    "\037\113\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\032\023\072\024\073\025\074\026\075\027\077" +
    "\030\100\031\223\033\061\034\071\035\104\036\056\037" +
    "\113\001\001\000\002\001\001\000\042\014\105\016\225" +
    "\021\103\022\011\023\072\024\073\025\074\026\075\027" +
    "\077\030\100\031\076\033\061\034\071\035\104\036\056" +
    "\037\101\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



  public Latte.Absyn.Program pProgram() throws Exception
  {
	java_cup.runtime.Symbol res = parse();
	return (Latte.Absyn.Program) res.value;
  }

public <B,A extends java.util.LinkedList<? super B>> A cons_(B x, A xs) { xs.addFirst(x); return xs; }

public void syntax_error(java_cup.runtime.Symbol cur_token)
{
	report_error("Syntax Error, trying to recover and continue parse...", cur_token);
}

public void unrecovered_syntax_error(java_cup.runtime.Symbol cur_token) throws java.lang.Exception
{
	throw new Exception("Unrecoverable Syntax Error");
}


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // RelOp ::= _SYMB_28 
            {
              Latte.Absyn.RelOp RESULT = null;
		 RESULT = new Latte.Absyn.NE(); 
              CUP$parser$result = new java_cup.runtime.Symbol(32/*RelOp*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // RelOp ::= _SYMB_27 
            {
              Latte.Absyn.RelOp RESULT = null;
		 RESULT = new Latte.Absyn.EQU(); 
              CUP$parser$result = new java_cup.runtime.Symbol(32/*RelOp*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // RelOp ::= _SYMB_26 
            {
              Latte.Absyn.RelOp RESULT = null;
		 RESULT = new Latte.Absyn.GE(); 
              CUP$parser$result = new java_cup.runtime.Symbol(32/*RelOp*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // RelOp ::= _SYMB_25 
            {
              Latte.Absyn.RelOp RESULT = null;
		 RESULT = new Latte.Absyn.GTH(); 
              CUP$parser$result = new java_cup.runtime.Symbol(32/*RelOp*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // RelOp ::= _SYMB_24 
            {
              Latte.Absyn.RelOp RESULT = null;
		 RESULT = new Latte.Absyn.LE(); 
              CUP$parser$result = new java_cup.runtime.Symbol(32/*RelOp*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // RelOp ::= _SYMB_23 
            {
              Latte.Absyn.RelOp RESULT = null;
		 RESULT = new Latte.Absyn.LTH(); 
              CUP$parser$result = new java_cup.runtime.Symbol(32/*RelOp*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // MulOp ::= _SYMB_22 
            {
              Latte.Absyn.MulOp RESULT = null;
		 RESULT = new Latte.Absyn.Mod(); 
              CUP$parser$result = new java_cup.runtime.Symbol(31/*MulOp*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // MulOp ::= _SYMB_21 
            {
              Latte.Absyn.MulOp RESULT = null;
		 RESULT = new Latte.Absyn.Div(); 
              CUP$parser$result = new java_cup.runtime.Symbol(31/*MulOp*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // MulOp ::= _SYMB_20 
            {
              Latte.Absyn.MulOp RESULT = null;
		 RESULT = new Latte.Absyn.Times(); 
              CUP$parser$result = new java_cup.runtime.Symbol(31/*MulOp*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // AddOp ::= _SYMB_14 
            {
              Latte.Absyn.AddOp RESULT = null;
		 RESULT = new Latte.Absyn.Minus(); 
              CUP$parser$result = new java_cup.runtime.Symbol(30/*AddOp*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // AddOp ::= _SYMB_19 
            {
              Latte.Absyn.AddOp RESULT = null;
		 RESULT = new Latte.Absyn.Plus(); 
              CUP$parser$result = new java_cup.runtime.Symbol(30/*AddOp*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // LValue ::= AttrAccess 
            {
              Latte.Absyn.LValue RESULT = null;
		Latte.Absyn.AttrAccess p_1 = (Latte.Absyn.AttrAccess)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Latte.Absyn.LVAttrAcc(p_1); 
              CUP$parser$result = new java_cup.runtime.Symbol(29/*LValue*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // LValue ::= ArrAccess 
            {
              Latte.Absyn.LValue RESULT = null;
		Latte.Absyn.ArrAccess p_1 = (Latte.Absyn.ArrAccess)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Latte.Absyn.LVEArrAccess(p_1); 
              CUP$parser$result = new java_cup.runtime.Symbol(29/*LValue*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // LValue ::= _IDENT_ 
            {
              Latte.Absyn.LValue RESULT = null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Latte.Absyn.LVSimpleIdent(p_1); 
              CUP$parser$result = new java_cup.runtime.Symbol(29/*LValue*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // LValue ::= MethodCall 
            {
              Latte.Absyn.LValue RESULT = null;
		Latte.Absyn.MethodCall p_1 = (Latte.Absyn.MethodCall)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Latte.Absyn.LVMethodCall(p_1); 
              CUP$parser$result = new java_cup.runtime.Symbol(29/*LValue*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // LValue ::= FunctionCall 
            {
              Latte.Absyn.LValue RESULT = null;
		Latte.Absyn.FunctionCall p_1 = (Latte.Absyn.FunctionCall)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Latte.Absyn.LVFCall(p_1); 
              CUP$parser$result = new java_cup.runtime.Symbol(29/*LValue*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // MethodCall ::= LValue _SYMB_18 FunctionCall 
            {
              Latte.Absyn.MethodCall RESULT = null;
		Latte.Absyn.LValue p_1 = (Latte.Absyn.LValue)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Latte.Absyn.FunctionCall p_3 = (Latte.Absyn.FunctionCall)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Latte.Absyn.MCall(p_1,p_3); 
              CUP$parser$result = new java_cup.runtime.Symbol(28/*MethodCall*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // AttrAccess ::= LValue _SYMB_18 _IDENT_ 
            {
              Latte.Absyn.AttrAccess RESULT = null;
		Latte.Absyn.LValue p_1 = (Latte.Absyn.LValue)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		String p_3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Latte.Absyn.AttrAcc(p_1,p_3); 
              CUP$parser$result = new java_cup.runtime.Symbol(27/*AttrAccess*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // ArrAccess ::= LValue _SYMB_12 Expr _SYMB_13 
            {
              Latte.Absyn.ArrAccess RESULT = null;
		Latte.Absyn.LValue p_1 = (Latte.Absyn.LValue)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		Latte.Absyn.Expr p_3 = (Latte.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Latte.Absyn.ArrAcc(p_1,p_3); 
              CUP$parser$result = new java_cup.runtime.Symbol(26/*ArrAccess*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // FunctionCall ::= _IDENT_ _SYMB_1 ListExpr _SYMB_2 
            {
              Latte.Absyn.FunctionCall RESULT = null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		Latte.Absyn.ListExpr p_3 = (Latte.Absyn.ListExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Latte.Absyn.FCall(p_1,p_3); 
              CUP$parser$result = new java_cup.runtime.Symbol(25/*FunctionCall*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // ListExpr ::= Expr _SYMB_0 ListExpr 
            {
              Latte.Absyn.ListExpr RESULT = null;
		Latte.Absyn.Expr p_1 = (Latte.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Latte.Absyn.ListExpr p_3 = (Latte.Absyn.ListExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = new java_cup.runtime.Symbol(24/*ListExpr*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // ListExpr ::= Expr 
            {
              Latte.Absyn.ListExpr RESULT = null;
		Latte.Absyn.Expr p_1 = (Latte.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Latte.Absyn.ListExpr(); RESULT.addLast(p_1); 
              CUP$parser$result = new java_cup.runtime.Symbol(24/*ListExpr*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // ListExpr ::= 
            {
              Latte.Absyn.ListExpr RESULT = null;
		 RESULT = new Latte.Absyn.ListExpr(); 
              CUP$parser$result = new java_cup.runtime.Symbol(24/*ListExpr*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // Expr ::= Expr1 
            {
              Latte.Absyn.Expr RESULT = null;
		Latte.Absyn.Expr p_1 = (Latte.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = p_1; 
              CUP$parser$result = new java_cup.runtime.Symbol(23/*Expr*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // Expr ::= Expr1 _SYMB_17 Expr 
            {
              Latte.Absyn.Expr RESULT = null;
		Latte.Absyn.Expr p_1 = (Latte.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Latte.Absyn.Expr p_3 = (Latte.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Latte.Absyn.EOr(p_1,p_3); 
              CUP$parser$result = new java_cup.runtime.Symbol(23/*Expr*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // Expr1 ::= Expr2 
            {
              Latte.Absyn.Expr RESULT = null;
		Latte.Absyn.Expr p_1 = (Latte.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = p_1; 
              CUP$parser$result = new java_cup.runtime.Symbol(22/*Expr1*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // Expr1 ::= Expr2 _SYMB_16 Expr1 
            {
              Latte.Absyn.Expr RESULT = null;
		Latte.Absyn.Expr p_1 = (Latte.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Latte.Absyn.Expr p_3 = (Latte.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Latte.Absyn.EAnd(p_1,p_3); 
              CUP$parser$result = new java_cup.runtime.Symbol(22/*Expr1*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // Expr2 ::= Expr3 
            {
              Latte.Absyn.Expr RESULT = null;
		Latte.Absyn.Expr p_1 = (Latte.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = p_1; 
              CUP$parser$result = new java_cup.runtime.Symbol(21/*Expr2*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // Expr2 ::= Expr2 RelOp Expr3 
            {
              Latte.Absyn.Expr RESULT = null;
		Latte.Absyn.Expr p_1 = (Latte.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Latte.Absyn.RelOp p_2 = (Latte.Absyn.RelOp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Latte.Absyn.Expr p_3 = (Latte.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Latte.Absyn.ERel(p_1,p_2,p_3); 
              CUP$parser$result = new java_cup.runtime.Symbol(21/*Expr2*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // Expr3 ::= Expr4 
            {
              Latte.Absyn.Expr RESULT = null;
		Latte.Absyn.Expr p_1 = (Latte.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = p_1; 
              CUP$parser$result = new java_cup.runtime.Symbol(20/*Expr3*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // Expr3 ::= Expr3 AddOp Expr4 
            {
              Latte.Absyn.Expr RESULT = null;
		Latte.Absyn.Expr p_1 = (Latte.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Latte.Absyn.AddOp p_2 = (Latte.Absyn.AddOp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Latte.Absyn.Expr p_3 = (Latte.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Latte.Absyn.EAdd(p_1,p_2,p_3); 
              CUP$parser$result = new java_cup.runtime.Symbol(20/*Expr3*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // Expr4 ::= Expr5 
            {
              Latte.Absyn.Expr RESULT = null;
		Latte.Absyn.Expr p_1 = (Latte.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = p_1; 
              CUP$parser$result = new java_cup.runtime.Symbol(19/*Expr4*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // Expr4 ::= Expr4 MulOp Expr5 
            {
              Latte.Absyn.Expr RESULT = null;
		Latte.Absyn.Expr p_1 = (Latte.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Latte.Absyn.MulOp p_2 = (Latte.Absyn.MulOp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Latte.Absyn.Expr p_3 = (Latte.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Latte.Absyn.EMul(p_1,p_2,p_3); 
              CUP$parser$result = new java_cup.runtime.Symbol(19/*Expr4*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // Expr5 ::= Expr6 
            {
              Latte.Absyn.Expr RESULT = null;
		Latte.Absyn.Expr p_1 = (Latte.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = p_1; 
              CUP$parser$result = new java_cup.runtime.Symbol(18/*Expr5*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // Expr5 ::= _SYMB_15 Expr6 
            {
              Latte.Absyn.Expr RESULT = null;
		Latte.Absyn.Expr p_2 = (Latte.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Latte.Absyn.Not(p_2); 
              CUP$parser$result = new java_cup.runtime.Symbol(18/*Expr5*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Expr5 ::= _SYMB_14 Expr6 
            {
              Latte.Absyn.Expr RESULT = null;
		Latte.Absyn.Expr p_2 = (Latte.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Latte.Absyn.Neg(p_2); 
              CUP$parser$result = new java_cup.runtime.Symbol(18/*Expr5*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // Expr6 ::= _SYMB_1 Expr _SYMB_2 
            {
              Latte.Absyn.Expr RESULT = null;
		Latte.Absyn.Expr p_2 = (Latte.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = p_2; 
              CUP$parser$result = new java_cup.runtime.Symbol(17/*Expr6*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Expr6 ::= _STRING_ 
            {
              Latte.Absyn.Expr RESULT = null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Latte.Absyn.EString(p_1); 
              CUP$parser$result = new java_cup.runtime.Symbol(17/*Expr6*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Expr6 ::= FunctionCall 
            {
              Latte.Absyn.Expr RESULT = null;
		Latte.Absyn.FunctionCall p_1 = (Latte.Absyn.FunctionCall)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Latte.Absyn.EApp(p_1); 
              CUP$parser$result = new java_cup.runtime.Symbol(17/*Expr6*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Expr6 ::= _SYMB_33 
            {
              Latte.Absyn.Expr RESULT = null;
		 RESULT = new Latte.Absyn.ELitFalse(); 
              CUP$parser$result = new java_cup.runtime.Symbol(17/*Expr6*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Expr6 ::= _SYMB_40 
            {
              Latte.Absyn.Expr RESULT = null;
		 RESULT = new Latte.Absyn.ELitTrue(); 
              CUP$parser$result = new java_cup.runtime.Symbol(17/*Expr6*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Expr6 ::= _INTEGER_ 
            {
              Latte.Absyn.Expr RESULT = null;
		Integer p_1 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Latte.Absyn.ELitInt(p_1); 
              CUP$parser$result = new java_cup.runtime.Symbol(17/*Expr6*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Expr6 ::= _SYMB_37 _IDENT_ 
            {
              Latte.Absyn.Expr RESULT = null;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Latte.Absyn.ENew(p_2); 
              CUP$parser$result = new java_cup.runtime.Symbol(17/*Expr6*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Expr6 ::= _SYMB_37 Type _SYMB_12 Expr _SYMB_13 
            {
              Latte.Absyn.Expr RESULT = null;
		Latte.Absyn.Type p_2 = (Latte.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		Latte.Absyn.Expr p_4 = (Latte.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Latte.Absyn.ENewArr(p_2,p_4); 
              CUP$parser$result = new java_cup.runtime.Symbol(17/*Expr6*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Expr6 ::= _IDENT_ 
            {
              Latte.Absyn.Expr RESULT = null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Latte.Absyn.EVar(p_1); 
              CUP$parser$result = new java_cup.runtime.Symbol(17/*Expr6*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Expr6 ::= ArrAccess 
            {
              Latte.Absyn.Expr RESULT = null;
		Latte.Absyn.ArrAccess p_1 = (Latte.Absyn.ArrAccess)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Latte.Absyn.EArrAccess(p_1); 
              CUP$parser$result = new java_cup.runtime.Symbol(17/*Expr6*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Expr6 ::= MethodCall 
            {
              Latte.Absyn.Expr RESULT = null;
		Latte.Absyn.MethodCall p_1 = (Latte.Absyn.MethodCall)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Latte.Absyn.EMthCall(p_1); 
              CUP$parser$result = new java_cup.runtime.Symbol(17/*Expr6*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Expr6 ::= AttrAccess 
            {
              Latte.Absyn.Expr RESULT = null;
		Latte.Absyn.AttrAccess p_1 = (Latte.Absyn.AttrAccess)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Latte.Absyn.EAttrAccess(p_1); 
              CUP$parser$result = new java_cup.runtime.Symbol(17/*Expr6*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Expr6 ::= _SYMB_1 Type _SYMB_11 
            {
              Latte.Absyn.Expr RESULT = null;
		Latte.Absyn.Type p_2 = (Latte.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Latte.Absyn.ECastNull(p_2); 
              CUP$parser$result = new java_cup.runtime.Symbol(17/*Expr6*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Type1 ::= _IDENT_ 
            {
              Latte.Absyn.Type RESULT = null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Latte.Absyn.Obj(p_1); 
              CUP$parser$result = new java_cup.runtime.Symbol(16/*Type1*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Type1 ::= _SYMB_41 
            {
              Latte.Absyn.Type RESULT = null;
		 RESULT = new Latte.Absyn.Void(); 
              CUP$parser$result = new java_cup.runtime.Symbol(16/*Type1*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Type1 ::= _SYMB_29 
            {
              Latte.Absyn.Type RESULT = null;
		 RESULT = new Latte.Absyn.Bool(); 
              CUP$parser$result = new java_cup.runtime.Symbol(16/*Type1*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Type1 ::= _SYMB_39 
            {
              Latte.Absyn.Type RESULT = null;
		 RESULT = new Latte.Absyn.Str(); 
              CUP$parser$result = new java_cup.runtime.Symbol(16/*Type1*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Type1 ::= _SYMB_36 
            {
              Latte.Absyn.Type RESULT = null;
		 RESULT = new Latte.Absyn.Int(); 
              CUP$parser$result = new java_cup.runtime.Symbol(16/*Type1*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Type ::= Type1 
            {
              Latte.Absyn.Type RESULT = null;
		Latte.Absyn.Type p_1 = (Latte.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = p_1; 
              CUP$parser$result = new java_cup.runtime.Symbol(15/*Type*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Type ::= Type1 _SYMB_10 
            {
              Latte.Absyn.Type RESULT = null;
		Latte.Absyn.Type p_1 = (Latte.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Latte.Absyn.Arr(p_1); 
              CUP$parser$result = new java_cup.runtime.Symbol(15/*Type*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // ListItem ::= Item _SYMB_0 ListItem 
            {
              Latte.Absyn.ListItem RESULT = null;
		Latte.Absyn.Item p_1 = (Latte.Absyn.Item)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Latte.Absyn.ListItem p_3 = (Latte.Absyn.ListItem)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = new java_cup.runtime.Symbol(14/*ListItem*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // ListItem ::= Item 
            {
              Latte.Absyn.ListItem RESULT = null;
		Latte.Absyn.Item p_1 = (Latte.Absyn.Item)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Latte.Absyn.ListItem(); RESULT.addLast(p_1); 
              CUP$parser$result = new java_cup.runtime.Symbol(14/*ListItem*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Item ::= _IDENT_ _SYMB_6 Expr 
            {
              Latte.Absyn.Item RESULT = null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Latte.Absyn.Expr p_3 = (Latte.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Latte.Absyn.Init(p_1,p_3); 
              CUP$parser$result = new java_cup.runtime.Symbol(13/*Item*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Item ::= _IDENT_ 
            {
              Latte.Absyn.Item RESULT = null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Latte.Absyn.NoInit(p_1); 
              CUP$parser$result = new java_cup.runtime.Symbol(13/*Item*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Stmt ::= Expr _SYMB_5 
            {
              Latte.Absyn.Stmt RESULT = null;
		Latte.Absyn.Expr p_1 = (Latte.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Latte.Absyn.SExp(p_1); 
              CUP$parser$result = new java_cup.runtime.Symbol(12/*Stmt*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Stmt ::= _SYMB_34 _SYMB_1 Type _IDENT_ _SYMB_9 _IDENT_ _SYMB_2 Stmt 
            {
              Latte.Absyn.Stmt RESULT = null;
		Latte.Absyn.Type p_3 = (Latte.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		String p_4 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		String p_6 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Latte.Absyn.Stmt p_8 = (Latte.Absyn.Stmt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Latte.Absyn.For(p_3,p_4,p_6,p_8); 
              CUP$parser$result = new java_cup.runtime.Symbol(12/*Stmt*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Stmt ::= _SYMB_42 _SYMB_1 Expr _SYMB_2 Stmt 
            {
              Latte.Absyn.Stmt RESULT = null;
		Latte.Absyn.Expr p_3 = (Latte.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Latte.Absyn.Stmt p_5 = (Latte.Absyn.Stmt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Latte.Absyn.While(p_3,p_5); 
              CUP$parser$result = new java_cup.runtime.Symbol(12/*Stmt*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Stmt ::= _SYMB_35 _SYMB_1 Expr _SYMB_2 Stmt _SYMB_31 Stmt 
            {
              Latte.Absyn.Stmt RESULT = null;
		Latte.Absyn.Expr p_3 = (Latte.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		Latte.Absyn.Stmt p_5 = (Latte.Absyn.Stmt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Latte.Absyn.Stmt p_7 = (Latte.Absyn.Stmt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Latte.Absyn.CondElse(p_3,p_5,p_7); 
              CUP$parser$result = new java_cup.runtime.Symbol(12/*Stmt*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Stmt ::= _SYMB_35 _SYMB_1 Expr _SYMB_2 Stmt 
            {
              Latte.Absyn.Stmt RESULT = null;
		Latte.Absyn.Expr p_3 = (Latte.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Latte.Absyn.Stmt p_5 = (Latte.Absyn.Stmt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Latte.Absyn.Cond(p_3,p_5); 
              CUP$parser$result = new java_cup.runtime.Symbol(12/*Stmt*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Stmt ::= _SYMB_38 _SYMB_5 
            {
              Latte.Absyn.Stmt RESULT = null;
		 RESULT = new Latte.Absyn.VRet(); 
              CUP$parser$result = new java_cup.runtime.Symbol(12/*Stmt*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Stmt ::= _SYMB_38 Expr _SYMB_5 
            {
              Latte.Absyn.Stmt RESULT = null;
		Latte.Absyn.Expr p_2 = (Latte.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Latte.Absyn.Ret(p_2); 
              CUP$parser$result = new java_cup.runtime.Symbol(12/*Stmt*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Stmt ::= LValue _SYMB_8 _SYMB_5 
            {
              Latte.Absyn.Stmt RESULT = null;
		Latte.Absyn.LValue p_1 = (Latte.Absyn.LValue)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new Latte.Absyn.Decr(p_1); 
              CUP$parser$result = new java_cup.runtime.Symbol(12/*Stmt*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Stmt ::= LValue _SYMB_7 _SYMB_5 
            {
              Latte.Absyn.Stmt RESULT = null;
		Latte.Absyn.LValue p_1 = (Latte.Absyn.LValue)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new Latte.Absyn.Incr(p_1); 
              CUP$parser$result = new java_cup.runtime.Symbol(12/*Stmt*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Stmt ::= LValue _SYMB_6 Expr _SYMB_5 
            {
              Latte.Absyn.Stmt RESULT = null;
		Latte.Absyn.LValue p_1 = (Latte.Absyn.LValue)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		Latte.Absyn.Expr p_3 = (Latte.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Latte.Absyn.Ass(p_1,p_3); 
              CUP$parser$result = new java_cup.runtime.Symbol(12/*Stmt*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Stmt ::= Type ListItem _SYMB_5 
            {
              Latte.Absyn.Stmt RESULT = null;
		Latte.Absyn.Type p_1 = (Latte.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Latte.Absyn.ListItem p_2 = (Latte.Absyn.ListItem)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Latte.Absyn.Decl(p_1,p_2); 
              CUP$parser$result = new java_cup.runtime.Symbol(12/*Stmt*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Stmt ::= Block 
            {
              Latte.Absyn.Stmt RESULT = null;
		Latte.Absyn.Block p_1 = (Latte.Absyn.Block)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Latte.Absyn.BStmt(p_1); 
              CUP$parser$result = new java_cup.runtime.Symbol(12/*Stmt*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Stmt ::= _SYMB_5 
            {
              Latte.Absyn.Stmt RESULT = null;
		 RESULT = new Latte.Absyn.Empty(); 
              CUP$parser$result = new java_cup.runtime.Symbol(12/*Stmt*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // ListStmt ::= ListStmt Stmt 
            {
              Latte.Absyn.ListStmt RESULT = null;
		Latte.Absyn.ListStmt p_1 = (Latte.Absyn.ListStmt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Latte.Absyn.Stmt p_2 = (Latte.Absyn.Stmt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = p_1; p_1.addLast(p_2); 
              CUP$parser$result = new java_cup.runtime.Symbol(11/*ListStmt*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // ListStmt ::= 
            {
              Latte.Absyn.ListStmt RESULT = null;
		 RESULT = new Latte.Absyn.ListStmt(); 
              CUP$parser$result = new java_cup.runtime.Symbol(11/*ListStmt*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Block ::= _SYMB_3 ListStmt _SYMB_4 
            {
              Latte.Absyn.Block RESULT = null;
		Latte.Absyn.ListStmt p_2 = (Latte.Absyn.ListStmt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Latte.Absyn.Blk(p_2); 
              CUP$parser$result = new java_cup.runtime.Symbol(10/*Block*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // ListClassElem ::= ListClassElem ClassElem 
            {
              Latte.Absyn.ListClassElem RESULT = null;
		Latte.Absyn.ListClassElem p_1 = (Latte.Absyn.ListClassElem)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Latte.Absyn.ClassElem p_2 = (Latte.Absyn.ClassElem)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = p_1; p_1.addLast(p_2); 
              CUP$parser$result = new java_cup.runtime.Symbol(9/*ListClassElem*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // ListClassElem ::= 
            {
              Latte.Absyn.ListClassElem RESULT = null;
		 RESULT = new Latte.Absyn.ListClassElem(); 
              CUP$parser$result = new java_cup.runtime.Symbol(9/*ListClassElem*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // ClassElem ::= Type _IDENT_ _SYMB_5 
            {
              Latte.Absyn.ClassElem RESULT = null;
		Latte.Absyn.Type p_1 = (Latte.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Latte.Absyn.ClassAtr(p_1,p_2); 
              CUP$parser$result = new java_cup.runtime.Symbol(8/*ClassElem*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // ClassElem ::= FuncDef 
            {
              Latte.Absyn.ClassElem RESULT = null;
		Latte.Absyn.FuncDef p_1 = (Latte.Absyn.FuncDef)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Latte.Absyn.ClassMeth(p_1); 
              CUP$parser$result = new java_cup.runtime.Symbol(8/*ClassElem*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // ClassBody ::= _SYMB_3 ListClassElem _SYMB_4 
            {
              Latte.Absyn.ClassBody RESULT = null;
		Latte.Absyn.ListClassElem p_2 = (Latte.Absyn.ListClassElem)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Latte.Absyn.ClassBlock(p_2); 
              CUP$parser$result = new java_cup.runtime.Symbol(7/*ClassBody*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // FuncDef ::= Type _IDENT_ _SYMB_1 ListArg _SYMB_2 Block 
            {
              Latte.Absyn.FuncDef RESULT = null;
		Latte.Absyn.Type p_1 = (Latte.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		Latte.Absyn.ListArg p_4 = (Latte.Absyn.ListArg)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Latte.Absyn.Block p_6 = (Latte.Absyn.Block)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Latte.Absyn.FunDef(p_1,p_2,p_4,p_6); 
              CUP$parser$result = new java_cup.runtime.Symbol(6/*FuncDef*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // ListArg ::= Arg _SYMB_0 ListArg 
            {
              Latte.Absyn.ListArg RESULT = null;
		Latte.Absyn.Arg p_1 = (Latte.Absyn.Arg)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Latte.Absyn.ListArg p_3 = (Latte.Absyn.ListArg)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = new java_cup.runtime.Symbol(5/*ListArg*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // ListArg ::= Arg 
            {
              Latte.Absyn.ListArg RESULT = null;
		Latte.Absyn.Arg p_1 = (Latte.Absyn.Arg)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Latte.Absyn.ListArg(); RESULT.addLast(p_1); 
              CUP$parser$result = new java_cup.runtime.Symbol(5/*ListArg*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // ListArg ::= 
            {
              Latte.Absyn.ListArg RESULT = null;
		 RESULT = new Latte.Absyn.ListArg(); 
              CUP$parser$result = new java_cup.runtime.Symbol(5/*ListArg*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Arg ::= Type _IDENT_ 
            {
              Latte.Absyn.Arg RESULT = null;
		Latte.Absyn.Type p_1 = (Latte.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Latte.Absyn.Ar(p_1,p_2); 
              CUP$parser$result = new java_cup.runtime.Symbol(4/*Arg*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // ListTopDef ::= TopDef ListTopDef 
            {
              Latte.Absyn.ListTopDef RESULT = null;
		Latte.Absyn.TopDef p_1 = (Latte.Absyn.TopDef)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Latte.Absyn.ListTopDef p_2 = (Latte.Absyn.ListTopDef)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = p_2; p_2.addFirst(p_1); 
              CUP$parser$result = new java_cup.runtime.Symbol(3/*ListTopDef*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // ListTopDef ::= TopDef 
            {
              Latte.Absyn.ListTopDef RESULT = null;
		Latte.Absyn.TopDef p_1 = (Latte.Absyn.TopDef)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Latte.Absyn.ListTopDef(); RESULT.addLast(p_1); 
              CUP$parser$result = new java_cup.runtime.Symbol(3/*ListTopDef*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // TopDef ::= _SYMB_30 _IDENT_ _SYMB_32 _IDENT_ ClassBody 
            {
              Latte.Absyn.TopDef RESULT = null;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		String p_4 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Latte.Absyn.ClassBody p_5 = (Latte.Absyn.ClassBody)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Latte.Absyn.ClassDefE(p_2,p_4,p_5); 
              CUP$parser$result = new java_cup.runtime.Symbol(2/*TopDef*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // TopDef ::= _SYMB_30 _IDENT_ ClassBody 
            {
              Latte.Absyn.TopDef RESULT = null;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Latte.Absyn.ClassBody p_3 = (Latte.Absyn.ClassBody)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Latte.Absyn.ClassDef(p_2,p_3); 
              CUP$parser$result = new java_cup.runtime.Symbol(2/*TopDef*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // TopDef ::= FuncDef 
            {
              Latte.Absyn.TopDef RESULT = null;
		Latte.Absyn.FuncDef p_1 = (Latte.Absyn.FuncDef)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Latte.Absyn.FnDef(p_1); 
              CUP$parser$result = new java_cup.runtime.Symbol(2/*TopDef*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Program ::= ListTopDef 
            {
              Latte.Absyn.Program RESULT = null;
		Latte.Absyn.ListTopDef p_1 = (Latte.Absyn.ListTopDef)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Latte.Absyn.Prog(p_1); 
              CUP$parser$result = new java_cup.runtime.Symbol(1/*Program*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Program EOF 
            {
              Object RESULT = null;
		Latte.Absyn.Program start_val = (Latte.Absyn.Program)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = new java_cup.runtime.Symbol(0/*$START*/, RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

